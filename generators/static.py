import argparse
import logging
from random import randint, uniform

USED_ITEM_ID = {-1}

USED_USER_ID = {-1}
USED_IP_ADDRESSES = {"0.0.0.0"}


def load_countries(filepath):
    """
    Loads countries from the file
    :param filepath: path to countries file
    :return: array with loaded countries
    """
    global COUNTRIES
    COUNTRIES = [line.strip() for line in open(filepath)]


def load_devices(filepath):
    """
    Loads devices from the file
    :param filepath: path to devices file
    :return: array with loaded devices
   """
    global DEVICES
    DEVICES = [line.strip() for line in open(filepath)]


def generate_users_and_ips_file(filepath_users, filepath_ip, users_number, min_user_id, max_user_id, min_devices_number,
                                max_devices_number):
    """
    Generates users and ip files
    :param users_number: number of users to generate
    :param filepath_users: path to a file with users
    :param filepath_ip: path to a file with ips
    :param min_devices_number: lowest possible number of devices
    :param max_devices_number: biggest possible number of devices
    :param min_user_id: lowest possible user id
    :param max_user_id: biggest possible user id
    :return: nothing
    """
    logging.info("Started generating users and ips files")

    with open(filepath_users, "w+") as file_users, open(filepath_ip, "w+") as file_ips:
        for i in range(users_number):
            user = generate_user(min_user_id, max_user_id, min_devices_number, max_devices_number)
            write_user(file_users, user)
            write_devices(file_ips, user[1], user[2])

    logging.info("Finished generating users and ips files")


def generate_items(filepath, items_number, min_item_id, max_item_id, min_item_price, max_item_price):
    """
    Generates items and writes them to file
    :param items_number: number of items to generate
    :param filepath: path to a file to write items in
    :param min_item_id: lowest possible item id
    :param max_item_id: biggest possible item id
    :param min_item_price: lowest possible item price
    :param max_item_price: biggest possible item price
    :return: nothing
    """
    logging.info("Started generating items files")

    with open(filepath, "w+") as file:
        for i in range(items_number):
            write_item_to_file(generate_item(min_item_id, max_item_id, min_item_price, max_item_price), file)

    logging.info("Finished generating items files")


def generate_user(min_user_id, max_user_id, min_devices_number, max_devices_number):
    """
    Generates user
    :param min_devices_number: lowest possible number of devices
    :param max_devices_number: biggest possible number of devices
    :param min_user_id: lowest possible user id
    :param max_user_id: biggest possible user id
    :return: tuple that represents user
    """
    return generate_user_id(min_user_id, max_user_id), \
           generate_devices(min_devices_number, max_devices_number), \
           generate_country()


def generate_user_id(min_user_id, max_user_id):
    """
    Generates user id
    :param min_user_id: lowest possible user id
    :param max_user_id: biggest possible user id
    :return: unique user id
    """
    user_id = -1
    while user_id in USED_USER_ID:
        user_id = randint(min_user_id, max_user_id)
    USED_USER_ID.add(user_id)
    return f"user{str(user_id)}"


def generate_devices(min_devices_number, max_devices_number):
    """
    Generates devices
    :param min_devices_number: lowest possible number of devices
    :param max_devices_number: biggest possible number of devices
    :return: list of tuples that represent devices
    """
    devices = []
    for _ in range(randint(min_devices_number, max_devices_number)):
        devices.append((DEVICES[randint(0, len(DEVICES) - 1)], generate_random_ip()))

    return devices


def generate_random_ip():
    """
    Generates random ip that hasn't been generated by it before
    :return: random ip that hasn't been generated by this function before
    """
    ip = "0.0.0.0"
    while ip in USED_IP_ADDRESSES:
        ip = ".".join([str(randint(0, 255)) for _ in range(4)])

    USED_IP_ADDRESSES.add(ip)

    return ip


def generate_country():
    """
    Randomly peeks a country from a list of possible
    :return: country
    """
    return COUNTRIES[randint(0, len(COUNTRIES) - 1)]


def generate_item(min_item_id, max_item_id, min_item_price, max_item_price):
    """
    Generates item
    :param min_item_id: lowest possible item id
    :param max_item_id: biggest possible item id
    :param min_item_price: lowest possible item price
    :param max_item_price: biggest possible item price
    :return: tuple that represents item
    """
    return generate_item_id(min_item_id, max_item_id), generate_item_price(min_item_price, max_item_price)


def generate_item_id(min_item_id, max_item_id):
    """
    Generates unique item id
    :param min_item_id: lowest possible item id
    :param max_item_id: biggest possible item id
    :return: unique item id
    """
    item_id = -1
    while item_id in USED_ITEM_ID:
        item_id = randint(min_item_id, max_item_id)

    USED_ITEM_ID.add(item_id)

    return f"item{str(item_id)}"


def generate_item_price(min_item_price, max_item_price):
    """
    Generates price
    :param min_item_price: lowest possible item price
    :param max_item_price: biggest possible item price
    :return: price
    """
    return str(uniform(min_item_price, max_item_price))


def write_user(file, user):
    """
    Writes user to a file
    :param file: opened file to write in
    :param user: user to write in
    :return: nothing
    """
    for device in user[1]:
        file.write(",".join([user[0], device[0], device[1]]) + "\n")


def write_devices(file, devices, country):
    """
    Writes list of devices and their country to a file
    :param file: opened file to write in
    :param devices: list of devices to write in
    :param country: country of owner of devices
    :return: nothing
    """
    for device in devices:
        file.write(",".join([device[1], country]) + "\n")


def write_item_to_file(item, file):
    """
    Writes item to a file
    :param item: item that will be written
    :param file: opened file in which item wil be written
    :return: nothing
    """
    file.write(",".join(item) + "\n")


def parse_arguments():
    """
    Parses arguments from CLI
    :return: parsed arguments
    """
    args_parser = argparse.ArgumentParser(description="Static generator")
    args_parser.add_argument("--items_number", default=10_000, help="Items to generate", dest="items_number")
    args_parser.add_argument("--min_item_id", default=0, help="Minimal item id", dest="min_item_id")
    args_parser.add_argument("--max_item_id", default=100_000_000, help="Maximal item id", dest="max_item_id")
    args_parser.add_argument("--min_item_price", default=0.5, help="Minimal item price", dest="min_item_price")
    args_parser.add_argument("--max_item_price", default=100_000, help="Maximal item price", dest="max_item_price")

    args_parser.add_argument("--users_number", default=10_000, help="Users to generate", dest="users_number")
    args_parser.add_argument("--min_user_id", default=1, help="Minimal user id", dest="min_user_id")
    args_parser.add_argument("--max_user_id", default=10_000_000, help="Maximal user id", dest="max_user_id")

    args_parser.add_argument("--min_devices_number", default=1, help="Minimal devices number",
                             dest="min_devices_number")
    args_parser.add_argument("--max_devices_number", default=5, help="Maximal devices number",
                             dest="max_devices_number")

    return args_parser.parse_args()


def set_up_logging():
    logging.basicConfig(format='%(asctime)s - %(levelname)s [%(name)s] [%(funcName)s():%(lineno)s] - %(message)s',
                        level=logging.INFO)


def __main__():
    set_up_logging()

    load_devices("resources/devices.txt")
    load_countries("resources/countries.txt")

    args = parse_arguments()

    generate_users_and_ips_file("users.csv", "ips.csv", args.users_number, args.min_user_id, args.max_user_id,
                                args.min_devices_number, args.max_devices_number)

    generate_items("items.csv", args.items_number, args.min_item_id, args.max_item_id,
                   args.min_item_price, args.max_item_price)


if __name__ == "__main__":
    __main__()
